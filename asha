ASha 

using System;
using System.Collections.Generic;
using System.Linq;
 
public class Animal
{
    public int AnimalId { get; set; }
    public string Name { get; set; }
    public string Type { get; set; }
    public int Age { get; set; }
 
    public Animal()
    {
        Name = string.Empty;
        Type = string.Empty;
    }
 
    public override bool Equals(object obj)
    {
        return obj is Animal animal && AnimalId == animal.AnimalId;
    }
 
    public override int GetHashCode()
    {
        return AnimalId.GetHashCode();
    }
}
 
public class AnimalManager
{
    public HashSet animals = new HashSet();
 
    public void AddAnimal(Animal animal)
    {
        if (animals.Contains(animal))
        {
            Console.WriteLine($"An animal with ID {animal.AnimalId} already exists.");
        }
        else
        {
            animals.Add(animal);
            Console.WriteLine("Animal added successfully.");
        }
    }
 
    public void EditAnimal(int animalId, string newName, string newType, int newAge)
    {
        Animal existing = animals.FirstOrDefault(a => a.AnimalId == animalId);
        if (existing != null)
        {
            animals.Remove(existing);
            existing.Name = newName;
            existing.Type = newType;
            existing.Age = newAge;
            animals.Add(existing);
            Console.WriteLine("Animal details updated successfully.");
        }
        else
        {
            Console.WriteLine($"No animal found with ID {animalId}.");
        }
    }
 
    public void DeleteAnimal(int animalId)
    {
        Animal toDelete = animals.FirstOrDefault(a => a.AnimalId == animalId);
        if (toDelete != null)
        {
            animals.Remove(toDelete);
            Console.WriteLine("Animal deleted successfully.");
        }
        else
        {
            Console.WriteLine($"No animal found with ID {animalId}.");
        }
    }
 
    public void ListAnimals()
    {
        if (animals.Count == 0)
        {
            Console.WriteLine("No animals found.");
            return;
        }
 
        Console.WriteLine("\nList of all animals:");
        foreach (var animal in animals)
        {
            Console.WriteLine($"ID: {animal.AnimalId}, Name: {animal.Name}, Type: {animal.Type}, Age: {animal.Age}");
        }
    }
}
 
public class Program
{
    public static void Main(string[] args)
    {
        AnimalManager animalManager = new AnimalManager();
        bool exit = false;
 
        while (!exit)
        {
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1. Add Animal");
            Console.WriteLine("2. Edit Animal by ID");
            Console.WriteLine("3. List All Animals");
            Console.WriteLine("4. Delete Animal by ID");
            Console.WriteLine("5. Exit");
            Console.Write("Enter your choice: ");
            string input = Console.ReadLine();
 
            switch (input)
            {
                case "1":
                    Console.Write("Enter Animal ID: ");
                    int addId = int.Parse(Console.ReadLine());
                    Console.Write("Enter Animal Name: ");
                    string name = Console.ReadLine();
                    Console.Write("Enter Animal Type: ");
                    string type = Console.ReadLine();
                    Console.Write("Enter Animal Age: ");
                    int age = int.Parse(Console.ReadLine());
 
                    Animal newAnimal = new Animal
                    {
                        AnimalId = addId,
                        Name = name,
                        Type = type,
                        Age = age
                    };
                    animalManager.AddAnimal(newAnimal);
                    break;
 
                case "2":
                    Console.Write("Enter Animal ID to edit: ");
                    int editId = int.Parse(Console.ReadLine());
 
                    Console.Write("Enter new name: ");
                    string newName = Console.ReadLine();
                    Console.Write("Enter new Animal type: ");
                    string newType = Console.ReadLine();
                    Console.Write("Enter new Animal age: ");
                    int newAge = int.Parse(Console.ReadLine());
 
                    animalManager.EditAnimal(editId, newName, newType, newAge);
                    break;
 
                case "3":
                    animalManager.ListAnimals();
                    break;
 
                case "4":
                    Console.Write("Enter Animal ID to delete: ");
                    int deleteId = int.Parse(Console.ReadLine());
                    animalManager.DeleteAnimal(deleteId);
                    break;
 
                case "5":
                    Console.WriteLine("Exiting program...");
                    exit = true;
                    break;
 
                default:
                    Console.WriteLine("Invalid choice, please try again.");
                    break;
            }
        }
    }
}
check this hashset code .
 
is this enough or do we have to add more functions
 
ARRAY LIST                                                                                                                                                           using System;
using System.Collections;
 
public class Program
{
    public static EmployeeManager employeeManager = new EmployeeManager();
 
    public static void Main(string[] args)
    {
        while (true)
        {
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1. Add Employee");
            Console.WriteLine("2. Display Employees");
            Console.WriteLine("3. Search Employee by ID");
            Console.WriteLine("4. Delete Employee");
            Console.WriteLine("5. Update Employee");
            Console.WriteLine("6. Exit");
            Console.Write("Enter your choice: ");
 
            string choice = Console.ReadLine();
 
            switch (choice)
            {
                case "1":
                    Console.Write("Enter Employee ID: ");
                    if (!int.TryParse(Console.ReadLine(), out int id))
                    {
                        Console.WriteLine("Invalid ID. Please enter a number.");
                        break;
                    }
 
                    Console.Write("Enter Employee Name: ");
                    string name = Console.ReadLine();
 
                    Console.Write("Enter Age: ");
                    if (!int.TryParse(Console.ReadLine(), out int age))
                    {
                        Console.WriteLine("Invalid Age. Please enter a number.");
                        break;
                    }
 
                    Console.Write("Enter Gender: ");
                    string gender = Console.ReadLine();
 
                    Console.Write("Enter Phone Number: ");
                    string phoneNumber = Console.ReadLine();
 
                    Employee employee = new Employee
                    {
                        EmployeeId = id,
                        EmployeeName = name,
                        Age = age,
                        Gender = gender,
                        PhoneNumber = phoneNumber,
                    };
 
                    employeeManager.AddEmployee(employee);
                    break;
 
                case "2":
                    employeeManager.DisplayEmployees();
                    break;
 
                case "3":
                    Console.Write("Enter Employee ID to search: ");
                    int searchId = int.Parse(Console.ReadLine());
                    employeeManager.SearchEmployeeById(searchId);
                    break;
 
                case "4":
                    Console.Write("Enter Employee ID to delete: ");
                    int deleteId = int.Parse(Console.ReadLine());
                    employeeManager.DeleteEmployee(deleteId);
                    break;
 
                case "5":
                    Console.Write("Enter Employee ID to update: ");
                    int updateId = int.Parse(Console.ReadLine());
                    employeeManager.UpdateEmployee(updateId);
                    break;
 
                case "6":
                    Console.WriteLine("Exiting program...");
                    return;
 
                default:
                    Console.WriteLine("Invalid choice, please try again.");
                    break;
            }
        }
    }
}
 
public class EmployeeManager
{
    public ArrayList Employees = new ArrayList();
 
    public void AddEmployee(Employee emp)
    {
        foreach (Employee existingEmployee in Employees)
        {
            if (existingEmployee.EmployeeId == emp.EmployeeId)
            {
                Console.WriteLine($"An employee with ID {emp.EmployeeId} already exists.");
                return;
            }
        }
 
        Employees.Add(emp);
        Console.WriteLine("Employee added successfully.");
    }
 
    public void DisplayEmployees()
    {
        if (Employees.Count == 0)
        {
            Console.WriteLine("No employees available.");
            return;
        }
 
        Console.WriteLine("\nEmployee List:");
        foreach (Employee emp in Employees)
        {
            emp.DisplayEmployeeDetails();
        }
    }
 
    public void SearchEmployeeById(int id)
    {
        foreach (Employee e in Employees)
        {
            if (e.EmployeeId == id)
            {
                e.DisplayEmployeeDetails();
                return;
            }
        }
        Console.WriteLine("Employee not found.");
    }
 
    public void DeleteEmployee(int id)
    {
        foreach (Employee e in Employees)
        {
            if (e.EmployeeId == id)
            {
                Employees.Remove(e);
                Console.WriteLine("Employee deleted successfully.");
                return;
            }
        }
        Console.WriteLine("Employee not found.");
    }
 
    public void UpdateEmployee(int id)
    {
        foreach (Employee e in Employees)
        {
            if (e.EmployeeId == id)
            {
                Console.Write("Enter new name: ");
                e.EmployeeName = Console.ReadLine();
 
                Console.Write("Enter new age: ");
                e.Age = int.Parse(Console.ReadLine());
 
                Console.Write("Enter new gender: ");
                e.Gender = Console.ReadLine();
 
                Console.Write("Enter new phone number: ");
                e.PhoneNumber = Console.ReadLine();
 
                Console.WriteLine("Employee updated successfully.");
                return;
            }
        }
        Console.WriteLine("Employee not found.");
    }
}
 
public class Employee
{
    public int EmployeeId { get; set; }
    public string EmployeeName { get; set; }
    public int Age { get; set; }
    public string Gender { get; set; }
    public string PhoneNumber { get; set; }
 
    public Employee() { }
 
    public void DisplayEmployeeDetails()
    {
        Console.WriteLine($"Employee ID: {EmployeeId}, Name: {EmployeeName}, Age: {Age}, Gender: {Gender}, Phone: {PhoneNumber}");
    }
}
 
 
LINKED LIST                                                                                                                                                                                    using System;
using System.Collections.Generic;
 
public class Program
{
    public static EmployeeManager employeeManager = new EmployeeManager();
 
    public static void Main(string[] args)
    {
        while (true)
        {
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1. Add Employee");
            Console.WriteLine("2. Display Employees");
            Console.WriteLine("3. Search Employee by ID");
            Console.WriteLine("4. Delete Employee");
            Console.WriteLine("5. Update Employee");
            Console.WriteLine("6. Exit");
            Console.Write("Enter your choice: ");
 
            string choice = Console.ReadLine();
 
            switch (choice)
            {
                case "1":
                    Console.Write("Enter Employee ID: ");
                    if (!int.TryParse(Console.ReadLine(), out int id))
                    {
                        Console.WriteLine("Invalid ID. Please enter a number.");
                        break;
                    }
 
                    Console.Write("Enter Employee Name: ");
                    string name = Console.ReadLine();
 
                    Console.Write("Enter Age: ");
                    if (!int.TryParse(Console.ReadLine(), out int age))
                    {
                        Console.WriteLine("Invalid Age. Please enter a number.");
                        break;
                    }
 
                    Console.Write("Enter Gender: ");
                    string gender = Console.ReadLine();
 
                    Console.Write("Enter Phone Number: ");
                    string phoneNumber = Console.ReadLine();
 
                    Employee employee = new Employee
                    {
                        EmployeeId = id,
                        EmployeeName = name,
                        Age = age,
                        Gender = gender,
                        PhoneNumber = phoneNumber,
                    };
 
                    employeeManager.AddEmployee(employee);
                    break;
 
                case "2":
                    employeeManager.DisplayEmployees();
                    break;
 
                case "3":
                    Console.Write("Enter Employee ID to search: ");
                    int searchId = int.Parse(Console.ReadLine());
                    employeeManager.SearchEmployeeById(searchId);
                    break;
 
                case "4":
                    Console.Write("Enter Employee ID to delete: ");
                    int deleteId = int.Parse(Console.ReadLine());
                    employeeManager.DeleteEmployee(deleteId);
                    break;
 
                case "5":
                    Console.Write("Enter Employee ID to update: ");
                    int updateId = int.Parse(Console.ReadLine());
                    employeeManager.UpdateEmployee(updateId);
                    break;
 
                case "6":
                    Console.WriteLine("Exiting program...");
                    return;
 
                default:
                    Console.WriteLine("Invalid choice, please try again.");
                    break;
            }
        }
    }
}
 
public class EmployeeManager
{
    public LinkedList Employees = new LinkedList();
 
    public void AddEmployee(Employee emp)
    {
        foreach (var existingEmployee in Employees)
        {
            if (existingEmployee.EmployeeId == emp.EmployeeId)
            {
                Console.WriteLine($"An employee with ID {emp.EmployeeId} already exists.");
                return;
            }
        }
 
        Employees.AddLast(emp);
        Console.WriteLine("Employee added successfully.");
    }
 
    public void DisplayEmployees()
    {
        if (Employees.Count == 0)
        {
            Console.WriteLine("No employees available.");
            return;
        }
 
        Console.WriteLine("\nEmployee List:");
        foreach (var emp in Employees)
        {
            emp.DisplayEmployeeDetails();
        }
    }
 
    public void SearchEmployeeById(int id)
    {
        foreach (var employee in Employees)
        {
            if (employee.EmployeeId == id)
            {
                employee.DisplayEmployeeDetails();
                return;
            }
        }
 
        Console.WriteLine("Employee not found.");
    }
 
    public void DeleteEmployee(int id)
    {
        var node = Employees.First;
        while (node != null)
        {
            if (node.Value.EmployeeId == id)
            {
                Employees.Remove(node);
                Console.WriteLine("Employee deleted successfully.");
                return;
            }
            node = node.Next;
        }
 
        Console.WriteLine("Employee not found.");
    }
 
    public void UpdateEmployee(int id)
    {
        foreach (var employee in Employees)
        {
            if (employee.EmployeeId == id)
            {
                Console.Write("Enter new name: ");
                employee.EmployeeName = Console.ReadLine();
 
                Console.Write("Enter new age: ");
                employee.Age = int.Parse(Console.ReadLine());
 
                Console.Write("Enter new gender: ");
                employee.Gender = Console.ReadLine();
 
                Console.Write("Enter new phone number: ");
                employee.PhoneNumber = Console.ReadLine();
 
                Console.WriteLine("Employee updated successfully.");
                return;
            }
        }
 
        Console.WriteLine("Employee not found.");
    }
}
 
public class Employee
{
    public int EmployeeId { get; set; }
    public string EmployeeName { get; set; }
    public int Age { get; set; }
    public string Gender { get; set; }
    public string PhoneNumber { get; set; }
 
    public Employee() { }
 
    public void DisplayEmployeeDetails()
    {
        Console.WriteLine($"Employee ID: {EmployeeId}, Name: {EmployeeName}, Age: {Age}, Gender: {Gender}, Phone: {PhoneNumber}");
    }
}
 
 
