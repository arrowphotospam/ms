using System;
using System.Collections;

public class Pet
{
    public int PetId{get; set;}
    public string Name{get; set;}
    public string Type{get; set;}
    public int Age{get; set;}

    public Pet(int id,string name,string type,int age)
    {
        PetId=id;
        Name=name;
        Type=type;
        Age=age;
    }

    public override string ToString()
    {
        return $"ID: {PetId}, Name: {Name}, Type: {Type}, Age: {Age}";
    }
}

public class PetManager
{
    public ArrayList pets=new ArrayList();

    public void AddPet(Pet pet)
    {
        foreach(object o in pets)
        {
            Pet p=(Pet)o;
            if(p.PetId==pet.PetId)
            {
                Console.WriteLine($"A pet with ID {pet.PetId} already exists.");
                return;
            }
        }
        pets.Add(pet);
        Console.WriteLine("Pet added successfully.");
    }

    public void ReadPetById(int id)
    {
        bool found=false;
        foreach(object o in pets)
        {
            Pet p=(Pet)o;
            if(p.PetId==id)
            {
                Console.WriteLine(p.ToString());
                found=true;
            }
        }
        if(!found)
            Console.WriteLine($"No pet found with ID {id}.");
    }

    public void ReadPetByName(string name)
    {
        bool found=false;
        foreach(object o in pets)
        {
            Pet p=(Pet)o;
            if(p.Name.Equals(name,StringComparison.OrdinalIgnoreCase))
            {
                Console.WriteLine(p.ToString());
                found=true;
            }
        }
        if(!found)
            Console.WriteLine($"No pet found with Name '{name}'.");
    }

    public void UpdatePetById(int id,string newName,string newType,int newAge)
    {
        foreach(object o in pets)
        {
            Pet p=(Pet)o;
            if(p.PetId==id)
            {
                p.Name=newName;
                p.Type=newType;
                p.Age=newAge;
                Console.WriteLine("Pet updated successfully.");
                return;
            }
        }
        Console.WriteLine($"No pet found with ID {id}.");
    }

    public void UpdatePetByName(string name,string newName,string newType,int newAge)
    {
        bool updated=false;
        foreach(object o in pets)
        {
            Pet p=(Pet)o;
            if(p.Name.Equals(name,StringComparison.OrdinalIgnoreCase))
            {
                p.Name=newName;
                p.Type=newType;
                p.Age=newAge;
                updated=true;
            }
        }
        Console.WriteLine(updated?"Pet(s) updated successfully.":$"No pet found with Name '{name}'.");
    }

    public void DeletePetById(int id)
    {
        for(int i=0;i<pets.Count;i++)
        {
            Pet p=(Pet)pets[i];
            if(p.PetId==id)
            {
                pets.RemoveAt(i);
                Console.WriteLine("Pet deleted successfully.");
                return;
            }
        }
        Console.WriteLine($"No pet found with ID {id}.");
    }

    public void DeletePetByName(string name)
    {
        int removed=0;
        for(int i=pets.Count-1;i>=0;i--)
        {
            Pet p=(Pet)pets[i];
            if(p.Name.Equals(name,StringComparison.OrdinalIgnoreCase))
            {
                pets.RemoveAt(i);
                removed++;
            }
        }
        if(removed==0)
            Console.WriteLine($"No pet found with Name '{name}'.");
        else
            Console.WriteLine($"{removed} pet(s) deleted.");
    }

    public void SortPetsById()
    {
        ArrayList sorted=new ArrayList(pets);
        sorted.Sort(new PetIdComparer());
        Console.WriteLine("Pets sorted by ID:");
        foreach(object o in sorted)
            Console.WriteLine(((Pet)o).ToString());
    }
}

public class PetIdComparer:IComparer
{
    public int Compare(object x,object y)
    {
        return ((Pet)x).PetId.CompareTo(((Pet)y).PetId);
    }
}

public class Program
{
    public static void Main()
    {
        PetManager manager=new PetManager();
        while(true)
        {
            Console.WriteLine("\nMenu:");
            Console.WriteLine("1. Add Pet");
            Console.WriteLine("2. Read by ID");
            Console.WriteLine("3. Read by Name");
            Console.WriteLine("4. Update by ID");
            Console.WriteLine("5. Update by Name");
            Console.WriteLine("6. Delete by ID");
            Console.WriteLine("7. Delete by Name");
            Console.WriteLine("8. Sort by ID");
            Console.WriteLine("9. Exit");
            Console.Write("Enter your choice: ");
            string choice=Console.ReadLine();
            try
            {
                switch(choice)
                {
                    case "1":
                        Console.Write("Enter Pet ID: ");
                        int id=int.Parse(Console.ReadLine());
                        Console.Write("Enter Name: ");
                        string name=Console.ReadLine();
                        Console.Write("Enter Type: ");
                        string type=Console.ReadLine();
                        Console.Write("Enter Age: ");
                        int age=int.Parse(Console.ReadLine());
                        manager.AddPet(new Pet(id,name,type,age));
                        break;
                    case "2":
                        Console.Write("Enter ID to read: ");
                        manager.ReadPetById(int.Parse(Console.ReadLine()));
                        break;
                    case "3":
                        Console.Write("Enter Name to read: ");
                        manager.ReadPetByName(Console.ReadLine());
                        break;
                    case "4":
                        Console.Write("Enter ID to update: ");
                        int uid=int.Parse(Console.ReadLine());
                        Console.Write("Enter new Name: ");
                        string uname=Console.ReadLine();
                        Console.Write("Enter new Type: ");
                        string utype=Console.ReadLine();
                        Console.Write("Enter new Age: ");
                        int uage=int.Parse(Console.ReadLine());
                        manager.UpdatePetById(uid,uname,utype,uage);
                        break;
                    case "5":
                        Console.Write("Enter Name to update: ");
                        string oldname=Console.ReadLine();
                        Console.Write("Enter new Name: ");
                        string newname=Console.ReadLine();
                        Console.Write("Enter new Type: ");
                        string ntype=Console.ReadLine();
                        Console.Write("Enter new Age: ");
                        int nage=int.Parse(Console.ReadLine());
                        manager.UpdatePetByName(oldname,newname,ntype,nage);
                        break;
                    case "6":
                        Console.Write("Enter ID to delete: ");
                        manager.DeletePetById(int.Parse(Console.ReadLine()));
                        break;
                    case "7":
                        Console.Write("Enter Name to delete: ");
                        manager.DeletePetByName(Console.ReadLine());
                        break;
                    case "8":
                        manager.SortPetsById();
                        break;
                    case "9":
                        Console.WriteLine("Exiting...");
                        return;
                    default:
                        Console.WriteLine("Invalid choice.");
                        break;
                }
            }
            catch(FormatException)
            {
                Console.WriteLine("Invalid input format. Please enter numeric values where required.");
            }
            catch(Exception ex)
            {
                Console.WriteLine($"{ex.Message}");
            }
        }
    }
}
